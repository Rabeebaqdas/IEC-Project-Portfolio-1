{
  "language": "Solidity",
  "sources": {
    "contracts/Part 1/Token4.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken4 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Imran Khan\";\r\n string public constant symbol = \"IK\";\r\n uint256 public totalSupply = 100 ether;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 18;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/Part 1/Token5.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken5 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Shahid Afridi\";\r\n string public constant symbol = \"SA\";\r\n uint256 public totalSupply = 100 * 10 ** 8;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 8;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/Part 1/Token6.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken6 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Dex Coin\";\r\n string public constant symbol = \"DC\";\r\n uint256 public totalSupply = 100 * 10 ** 10;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 10;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/Part 2/Token1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken1 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Cherry Blossom\";\r\n string public constant symbol = \"CB\";\r\n uint256 public totalSupply = 1000 ether;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 18;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 quantity) public onlyAdmin returns(uint256){\r\n        totalSupply += quantity;\r\n        balances[msg.sender] += quantity;\r\n        return totalSupply;\r\n    }\r\n\r\n    function burn(uint256 amount) public onlyAdmin returns(uint256) {\r\n        require(balances[msg.sender] >= amount,\"You have enough tokens to burn\");\r\n        balances[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        return totalSupply;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/Part 2/Token2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken2 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Babar Azam\";\r\n string public constant symbol = \"BA\";\r\n uint256 public totalSupply = 1000 * 10 ** 8;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 8;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 quantity) public onlyAdmin returns(uint256){\r\n        totalSupply += quantity;\r\n        balances[msg.sender] += quantity;\r\n        return totalSupply;\r\n    }\r\n\r\n    function burn(uint256 amount) public onlyAdmin returns(uint256) {\r\n        require(balances[msg.sender] >= amount,\"You have enough tokens to burn\");\r\n        balances[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        return totalSupply;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n}"
    },
    "contracts/Part 2/Token3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MyToken3 {\r\n    ////////////////State Variables///////////////////////\r\n address private  admin;\r\n string public constant name = \"Shiba-Inu\";\r\n string public constant symbol = \"SI\";\r\n uint256 public totalSupply = 1000 * 10 ** 10;\r\n uint256 public immutable decimals; \r\n ////////////////////////////////Events//////////////////////////////\r\n\r\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\r\n    event Allowance(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    //////////////////////Mappings///////////////////////\r\n\r\n    mapping(address=>uint256) private balances;\r\n    mapping(address=>mapping(address=>uint256)) private allowed;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        decimals = 10;\r\n    } \r\n\r\n///////////////////////////Modifier///////////////////\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin,\"You are not allowed to do that\");\r\n        _;\r\n    }\r\n\r\n    /////////////////////Main Functions///////////////////////////\r\n\r\n    function transfer(address reciever, uint256 amount) public returns(bool){\r\n        require(balances[msg.sender] >= amount,\"You dont have enough tokens to transfer\");\r\n        require(reciever != address(0),\"This address does not exist\");\r\n        balances[msg.sender] -= amount;\r\n        balances[reciever] += amount;\r\n\r\n        emit Transfer(msg.sender,reciever,amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 quantity) public onlyAdmin returns(uint256){\r\n        totalSupply += quantity;\r\n        balances[msg.sender] += quantity;\r\n        return totalSupply;\r\n    }\r\n\r\n    function burn(uint256 amount) public onlyAdmin returns(uint256) {\r\n        require(balances[msg.sender] >= amount,\"You have enough tokens to burn\");\r\n        balances[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        return totalSupply;\r\n    }\r\n\r\n    function approval(address _spender, uint256 _value) public returns(bool success) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         \r\n         emit Allowance(msg.sender,_spender,_value);\r\n         return true;\r\n    } \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        uint256 allowedTokens = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowedTokens>=_value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////View Functions//////////////////////\r\n\r\n\r\n    \r\n    function allowance(address _owner, address _spender) public view returns(uint256){\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function balanceOf(address user) public view returns(uint256){\r\n        return balances[user];\r\n    }\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}